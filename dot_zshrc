#!/usr/bin/env zsh

# ===== Amazon Q Developer CLI (pre) =====
[[ -f "${HOME}/Library/Application Support/amazon-q/shell/zshrc.pre.zsh" ]] && source "${HOME}/Library/Application Support/amazon-q/shell/zshrc.post.zsh"

# ===== Homebrew設定 =====
# Homebrewのパスを設定（M4 Mac用）
if [[ -x /opt/homebrew/bin/brew ]]; then
  eval "$(/opt/homebrew/bin/brew shellenv)"
elif [[ -x /usr/local/bin/brew ]]; then
  eval "$(/usr/local/bin/brew shellenv)"
fi

# ===== nvm設定 =====
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# ===== pyenv設定 =====
if [[ -d "$HOME/.pyenv" ]]; then
  export PYENV_ROOT="$HOME/.pyenv"
elif command -v pyenv >/dev/null 2>&1; then
  export PYENV_ROOT="$(pyenv root 2>/dev/null)"
fi

if [[ -n "${PYENV_ROOT:-}" && -d "$PYENV_ROOT/bin" ]]; then
  case ":$PATH:" in
    *":$PYENV_ROOT/bin:"*) ;;
    *) export PATH="$PYENV_ROOT/bin:$PATH" ;;
  esac
fi

if command -v pyenv >/dev/null 2>&1; then
  eval "$(pyenv init - zsh)"
fi

# ===== nodenv設定 =====
if [[ -d "$HOME/.nodenv" ]]; then
  export NODENV_ROOT="$HOME/.nodenv"
elif command -v nodenv >/dev/null 2>&1; then
  export NODENV_ROOT="$(nodenv root 2>/dev/null)"
fi

if [[ -n "${NODENV_ROOT:-}" && -d "$NODENV_ROOT/bin" ]]; then
  case ":$PATH:" in
    *":$NODENV_ROOT/bin:"*) ;;
    *) export PATH="$NODENV_ROOT/bin:$PATH" ;;
  esac
fi

if command -v nodenv >/dev/null 2>&1; then
  eval "$(nodenv init -)"
fi

# ===== Oh My Zsh設定 =====
# Path to your Oh My Zsh installation
export ZSH="$HOME/.oh-my-zsh"

# テーマ設定（starshipを使用するため無効化）
ZSH_THEME=""

# fzfのインストールディレクトリを設定
if [[ -d /opt/homebrew/opt/fzf ]]; then
  export FZF_BASE="/opt/homebrew/opt/fzf"
elif [[ -d /usr/local/opt/fzf ]]; then
  export FZF_BASE="/usr/local/opt/fzf"
fi

# fzfのシェル統合を設定
if [[ -f /opt/homebrew/opt/fzf/shell/completion.zsh ]]; then
  source /opt/homebrew/opt/fzf/shell/completion.zsh
  source /opt/homebrew/opt/fzf/shell/key-bindings.zsh
elif [[ -f /usr/local/opt/fzf/shell/completion.zsh ]]; then
  source /usr/local/opt/fzf/shell/completion.zsh
  source /usr/local/opt/fzf/shell/key-bindings.zsh
fi

# 自動更新の設定
zstyle ':omz:update' mode auto
zstyle ':omz:update' frequency 7

# 履歴のタイムスタンプフォーマット
HIST_STAMPS="yyyy-mm-dd"

# 補完の待機中に表示するドット
COMPLETION_WAITING_DOTS="true"

# プラグイン設定
# 標準プラグイン
plugins=(
  git
  macos
  docker
  docker-compose
  npm
  yarn
  vscode
  fzf
)

# Oh My Zshを読み込む
source $ZSH/oh-my-zsh.sh

# ===== 追加プラグイン設定 =====
# zsh-autosuggestions
source ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh

# zsh-syntax-highlighting
source ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# zsh-completions
fpath=(${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-completions/src $fpath)

# ===== zoxide設定 =====
if (( $+commands[zoxide] )); then
  # zoxideの標準初期化
  eval "$(zoxide init zsh)"

  # zoxideのインタラクティブモードをCtrl+uにバインド
  function zoxide-jump-interactive() {
    BUFFER="zi"
    zle accept-line
  }
  zle -N zoxide-jump-interactive
  bindkey '^u' zoxide-jump-interactive
else
  echo "zoxide not found. Install with: brew install zoxide"
fi

# ===== fzf設定 =====
if (( $+commands[fzf] )); then
  # fzfの基本設定
  export FZF_DEFAULT_OPTS="--height 40% --layout=reverse --border --preview 'cat {}'"
  export FZF_DEFAULT_COMMAND="fd --type f --hidden --follow --exclude .git"
  export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

  # fzfのキーバインディング
  if [[ -f ~/.fzf.zsh ]]; then
    source ~/.fzf.zsh
  elif [[ -f /opt/homebrew/opt/fzf/shell/key-bindings.zsh ]]; then
    source /opt/homebrew/opt/fzf/shell/key-bindings.zsh
    source /opt/homebrew/opt/fzf/shell/completion.zsh
  elif [[ -f /usr/local/opt/fzf/shell/key-bindings.zsh ]]; then
    source /usr/local/opt/fzf/shell/key-bindings.zsh
    source /usr/local/opt/fzf/shell/completion.zsh
  fi
else
  echo "fzf not found. Install with: brew install fzf"
fi

# ===== starship設定 =====
if (( $+commands[starship] )); then
  eval "$(starship init zsh)"
else
  echo "starship not found. Install with: brew install starship"
fi

# ===== 履歴設定 =====
# 履歴ファイルの設定
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000

# 履歴の共有
setopt share_history
# 重複するコマンドを履歴に残さない
setopt hist_ignore_all_dups
# 履歴にスペースから始まるコマンドを残さない
setopt hist_ignore_space
# 履歴に保存するときに余分なスペースを削除
setopt hist_reduce_blanks

# ===== ディレクトリスタック =====
# ディレクトリスタックを有効化
setopt auto_pushd
# 重複するディレクトリをスタックに追加しない
setopt pushd_ignore_dups
# cd - で以前のディレクトリに移動
setopt auto_cd
# cdコマンドをオーバーライド（lsは実行しない）
function cd() {
  builtin cd "$@"
}

# ディレクトリ変更時に自動的にlsを実行する関数
function _auto_ls() {
  # ディレクトリ内のファイル/ディレクトリの数をカウント
  local file_count=$(ls -A | wc -l | tr -d ' ')

  # ファイル数が100未満の場合のみlsを実行
  if [ $file_count -lt 100 ]; then
    ls
  else
    echo "ディレクトリ内のファイル数が多いため、ls表示をスキップしました（$file_count個）"
  fi
}

# すべてのディレクトリ変更でlsを実行するフックを設定
autoload -U add-zsh-hook
add-zsh-hook chpwd _auto_ls

# ===== 補完設定 =====
# 大文字小文字を区別しない
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
# 補完メニューを有効化
zstyle ':completion:*' menu select
# キャッシュを有効化
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.zsh/cache

# ===== エイリアス =====
# ls関連
alias ls='ls -G'
alias ll='ls -la'
alias la='ls -a'
alias l='ls -CF'

# ディレクトリ移動
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'

# Git関連
alias gs='git status'
alias ga='git add'
alias gc='git commit'
alias gp='git push'
alias gl='git pull'
alias gd='git diff'
alias gco='git checkout'
alias gb='git branch'
alias gpck='git branch -a --sort=-authordate | cut -b 3- | perl -pe '\''s#^remotes/origin/###'\'' | perl -nlE '\''say if !$c{$_}++'\'' | grep -v -- "-
>" | fzf --height 40% --layout=reverse --border --preview "git log --oneline --graph --color=always --max-count=10 {}" | xargs git checkout'

# その他
alias zshrc='$EDITOR ~/.zshrc'
alias reload='source ~/.zshrc'
alias brewup='brew update && brew upgrade && brew cleanup'

# ===== 環境変数 =====
# エディタ設定
export EDITOR='vim'
export VISUAL='vim'

# 言語設定
export LANG=ja_JP.UTF-8
export LC_ALL=ja_JP.UTF-8

# パスの設定
# ローカルのbinディレクトリをパスに追加
if [[ -d "$HOME/.local/bin" ]]; then
  export PATH="$HOME/.local/bin:$PATH"
fi

# ===== その他の設定 =====
# コマンド修正の提案
setopt correct
# ビープ音を無効化
unsetopt beep
